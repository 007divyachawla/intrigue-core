<div class="row">
<div class="col-md-6">
<h3>Intrigue Core (<%=$intrigue_server_uri%>)</h3>
  <h4>Failed: <%= @failed %></h4>
  <h4>Processed: <%= @processed %></h4>
  <h4>Queues: <%= @queues.inspect %></h4>

  <form class="form-horizontal" target="_self" method="post" action="/v1/interactive">
    <div class="form-group">
      <!-- <select name="task" id="task_name"> -->
      <label for="task_name" class="col-xs-2 control-label">Task</label>
      <div class="col-xs-6">
      <select class="form-control input-sm" name="task" id="task_name" onchange="get_task_data();">

        <% @task_names.each do |task_name| %>
          <%
            # Create the task
            task = TaskFactory.create_by_pretty_name(task_name)

            # Check that the supplied type is allowed
            if params[:type]
              # Skip to the next task unless the current type is allowed
              next unless (task.metadata[:allowed_types].include?(params[:type]) ||
                            task.metadata[:allowed_types].include?("*") )
            end
          %>
          <!-- set up the task in an option box, default to search_bing -->
          <option value="<%= task.metadata[:name] %>"
            <% if params[:task_name] %>
              <%= "selected='selected'" if params[:task_name] == task.metadata[:name] %>
            <% else %>
              <%= "selected='selected'" if task.metadata[:name] == "search_bing" %>
            <% end %>
            ><%= task_name %>
          </option>

      <% end %>
      </select>
      </div>
    </div>

    <!-- Get all attributes and use this to create an entity -->
    <% attribs = {}; params.each{|k,v| attribs[k.gsub("attrib_","").to_sym] = v if (k =~/^attrib/ && v.length<100) } %>
    <% if params[:type] %>
      <%= EntityFactory.create_by_type(params[:type],attribs).form  %>
    <% else %>
      <div class="form-group">
        <label for="entity_type" class="col-xs-2 control-label">Type</label>
        <div class="col-xs-6">
          <input type="text" class="form-control input-sm" id="entity_type" name="entity_type" value="<%= h params[:type] || "String" %>">
        </div>
      </div>
      <div class="form-group">
        <label for="attrib_name" class="col-xs-2 control-label">Name</label>
        <div class="col-xs-6">
          <input type="text" class="form-control input-sm" id="attrib_name" name="attrib_name" value="<%= h params[:attrib_name] || "intrigue.io" %>">
        </div>
      </div>
    <% end %>

    <h5>Options</h5>
    <div id="options"></div>

    <input class="btn btn-info" type="submit" value="Run Task">
  </form>
  </div>
  <div id="metadata" class="col-md-6"></div>
</div>

  <script type="text/javascript">

      function get_task_data(){
        //alert("getting task data");

        // http://stackoverflow.com/questions/1420881/how-to-extract-base-url-from-a-string-in-javascript
        if (typeof location.origin === 'undefined')
          location.origin = location.protocol + '//' + location.host;

        url = location.origin.concat("/v1/tasks.json");
        //alert("uri: " + url)

        var xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function() {
            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
              //alert(xmlhttp.responseText);
              var hash = JSON.parse(xmlhttp.responseText);
              parse_tasks(hash);
            }
        }
        xmlhttp.open("GET", url, true);
        xmlhttp.send();
      }

      function set_options(options){

        //alert(options[0]["name"])
        // alert(document.getElementById("options"));
        // create a new div element
        // and give it some content
        //var newDiv = document.createElement("input");
        //var newContent = document.createTextNode("Options go here!");
        //newDiv.appendChild(newContent); //add the text node to the newly created div.

        // add the newly created element and its content into the DOM
        //alert(options)
        //document.getElementById("options").innerHTML = "";
        $( "#options" ).empty();

        var arrayLength = options.length;
        var option_html = "";
        for (var i = 0; i < arrayLength; i++) {
          option_html = option_html + options[i]['name'] + ": <input name=option_" + options[i]['name'] + " value="+ options[i]["default"] +"></input><br/>";
        }
        // set the html
        $( "#options" ).html( option_html );
      }

      function parse_tasks(task_hash){
        var task_count = task_hash.length;

        // go through the hash
        for (var i = 0; i < task_count; i++) {

          // configure the form
          if(task_hash[i]["name"] == document.forms[0]["task_name"].value){

              // get values, so we can check if they exist
              var entity_type=document.forms[0]["entity_type"].value;
              var entity_name=document.forms[0]["attrib_name"].value;

              if (! location.search.split('type=')[1]){ // if we don't have a set type
                //if (entity_type==null || entity_type=="", entity_name==null || entity_name==""){ // and the form isn't filled
                  document.forms[0]["entity_type"].value = task_hash[i]["example_entities"][0]["type"];
                  document.forms[0]["attrib_name"].value = task_hash[i]["example_entities"][0]["attributes"]["name"];
                //}
              }

            document.getElementById("metadata").innerHTML = "<pre><code class='json'>" + JSON.stringify(task_hash[i],null, 2);  + "</code></pre>";
            set_options(task_hash[i]["allowed_options"]);
            //alert(JSON.stringify(task_hash[i]));
          }
          //alert(task_hash[i]["name"] + " " + document.forms[0]["task_name"].value)
        }
        //alert("out: " + out)
        highlightCode();
      }

      // Initialize highlight.js syntax highlighting
      function highlightCode() {
        $(document).ready(function() {
          $('pre code').each(function(i, block) {
            hljs.highlightBlock(block);
          });
        });
      }
  </script>

<!--
Available Task Details:
<pre>
  <% @tasks.each do |t| %>
    <%= t.metadata.to_json %>
  <% end %>
</pre>
-->
